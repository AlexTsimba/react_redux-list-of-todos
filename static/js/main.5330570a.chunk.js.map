{"version":3,"sources":["types/Filter.ts","features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","api.ts","components/Loader/Loader.tsx","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["FilterOptions","actions","todo","type","payload","currentTodoReducer","state","action","setQueryAction","query","setFilterType","todoFilter","status","All","filterReducer","setTodosAction","todos","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppSelector","useDispatch","useSelector","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","Loader","className","TodoList","dispatch","selectedTodo","filterStatus","visibleTodos","useMemo","filteredTodos","Active","completed","Completed","title","toLowerCase","includes","filterTodos","map","id","classNames","onClick","TodoFilter","onSubmit","e","preventDefault","handleSubmit","onChange","selectedFilter","target","value","handleFilterStatus","placeholder","handleChange","length","style","pointerEvents","TodoModal","useState","user","setUser","useEffect","userId","dataFromServer","href","email","name","App","data","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5330570a.chunk.js","sourcesContent":["export const enum FilterOptions {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n","import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    // Implement all actions here\n    case 'currentTodo/SET':\n      return action.payload;\n\n    case 'currentTodo/REMOVE':\n      return null;\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { FilterOptions } from '../types/Filter';\n\ntype QueryAction = {\n  type: 'filter/QUERY',\n  payload: string,\n};\n\ntype FilterAction = {\n  type: 'filter/TYPE',\n  payload: string,\n};\n\ntype Action = QueryAction | FilterAction;\n\nexport const setQueryAction = ((query: string): QueryAction => ({\n  type: 'filter/QUERY',\n  payload: query,\n}));\n\nexport const setFilterType = ((type: string): FilterAction => ({\n  type: 'filter/TYPE',\n  payload: type,\n}));\n\nexport const actions = { setQueryAction, setFilterType };\n\nconst FilterStatus: string = FilterOptions.All;\n\nconst todoFilter = {\n  query: '',\n  status: FilterStatus,\n};\n\nconst filterReducer = (state = todoFilter, action: Action) => {\n  switch (action.type) {\n    case 'filter/QUERY':\n      return {\n        ...state,\n        query: action.payload,\n      };\n\n    case 'filter/TYPE':\n      return {\n        ...state,\n        status: action.payload,\n      };\n\n    default:\n      return {\n        ...state,\n      };\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype SetTodosAction = {\n  type: 'todos/SET',\n  payload: Todo[],\n};\n\nexport const setTodosAction = (todos: Todo[]): SetTodosAction => ({\n  type: 'todos/SET',\n  payload: todos,\n});\n\nexport const actions = { setTodosAction };\n\nconst todosReducer = (state: Todo[] = [], action: SetTodosAction): Todo[] => {\n  switch (action.type) {\n    case 'todos/SET':\n      return action.payload;\n\n    default:\n      return state;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","/* eslint-disable @typescript-eslint/no-shadow */\nimport { FC, useMemo } from 'react';\nimport classNames from 'classnames';\nimport { useDispatch } from 'react-redux';\nimport { actions } from '../../features/currentTodo';\nimport { useAppSelector } from '../../app/hooks';\nimport { Todo } from '../../types/Todo';\nimport { FilterOptions } from '../../types/Filter';\n\nexport const TodoList: FC = () => {\n  const todos = useAppSelector(state => state.todos);\n  const dispatch = useDispatch();\n  const selectedTodo = useAppSelector(state => state.currentTodo);\n\n  const handleOnClick = (clickedTodo: Todo) => {\n    dispatch(actions.setTodo(clickedTodo));\n  };\n\n  const filterStatus = useAppSelector(state => state.filter.status);\n  const query = useAppSelector(state => state.filter.query);\n\n  const filterTodos = (filter: string, query: string, todos: Todo[]) => {\n    let filteredTodos = todos;\n\n    switch (filter) {\n      case FilterOptions.Active:\n        filteredTodos = todos.filter(todo => !todo.completed);\n        break;\n\n      case FilterOptions.Completed:\n        filteredTodos = todos.filter(todo => todo.completed);\n        break;\n\n      case FilterOptions.All:\n      default:\n        break;\n    }\n\n    if (query) {\n      filteredTodos = filteredTodos.filter(\n        todo => todo.title.toLowerCase().includes(query.toLowerCase()),\n      );\n    }\n\n    return filteredTodos;\n  };\n\n  const visibleTodos = useMemo(() => {\n    return filterTodos(filterStatus, query, todos);\n  }, [filterStatus, query]);\n\n  return (\n    <>\n      <p className=\"notification is-warning\">\n        There are no todos matching current filter criteria\n      </p>\n\n      <table className=\"table is-narrow is-fullwidth\">\n        <thead>\n          <tr>\n            <th>#</th>\n\n            <th>\n              <span className=\"icon\">\n                <i className=\"fas fa-check\" />\n              </span>\n            </th>\n\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {visibleTodos.map(todo => {\n            const { id, completed, title } = todo;\n\n            return (\n              <tr data-cy=\"todo\" key={id}>\n                <td className=\"is-vcentered\">{id}</td>\n                <td className=\"is-vcentered\">\n                  {completed && (\n                    <span className=\"icon\" data-cy=\"iconCompleted\">\n                      <i className=\"fas fa-check\" />\n                    </span>\n                  )}\n                </td>\n                <td className=\"is-vcentered is-expanded\">\n                  <p\n                    className={classNames('', {\n                      'has-text-danger': !completed,\n                      'has-text-success': completed,\n                    })}\n                  >\n                    {title}\n                  </p>\n                </td>\n                <td className=\"has-text-right is-vcentered\">\n                  <button\n                    data-cy=\"selectButton\"\n                    className=\"button\"\n                    type=\"button\"\n                    onClick={() => handleOnClick(todo)}\n                  >\n                    <span className={classNames('icon', {\n                      'far fa-eye-slash': selectedTodo?.id === id,\n                      'far fa-eye': selectedTodo?.id !== id,\n                    })}\n                    >\n                      <i />\n                    </span>\n                  </button>\n                </td>\n              </tr>\n            );\n          })}\n\n        </tbody>\n      </table>\n    </>\n  );\n};\n","import { FC } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useAppSelector } from '../../app/hooks';\nimport { setFilterType, setQueryAction } from '../../features/filter';\nimport { FilterOptions } from '../../types/Filter';\n\nexport const TodoFilter: FC = () => {\n  const dispatch = useDispatch();\n  const query = useAppSelector(state => state.filter.query);\n\n  const handleFilterStatus = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    const selectedFilter = e.target.value;\n\n    dispatch(setFilterType(selectedFilter));\n  };\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    dispatch(setQueryAction(e.target.value));\n  };\n\n  const handleClear = () => {\n    dispatch(setQueryAction(''));\n  };\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n  };\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={e => handleSubmit(e)}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            onChange={(e) => handleFilterStatus(e)}\n          >\n            <option value={FilterOptions.All}>All</option>\n            <option value={FilterOptions.Active}>Active</option>\n            <option value={FilterOptions.Completed}>Completed</option>\n          </select>\n        </span>\n      </p>\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          onChange={(e) => handleChange(e)}\n          value={query}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query.length > 0\n          && (\n            <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n              <button\n                aria-label=\"clear\"\n                data-cy=\"clearSearchButton\"\n                type=\"button\"\n                className=\"delete\"\n                onClick={handleClear}\n              />\n            </span>\n          )}\n      </p>\n    </form>\n  );\n};\n","import { FC, useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { actions } from '../../features/currentTodo';\nimport { useAppSelector } from '../../app/hooks';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\n\nexport const TodoModal: FC = () => {\n  const [user, setUser] = useState<User>();\n  const dispatch = useDispatch();\n  const selectedTodo = useAppSelector(state => state.currentTodo);\n\n  const handleClick = () => {\n    dispatch(actions.removeTodo());\n  };\n\n  useEffect(() => {\n    if (selectedTodo) {\n      getUser(selectedTodo.userId)\n        .then(dataFromServer => setUser(dataFromServer));\n    }\n  }, [selectedTodo]);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!user || !selectedTodo\n        ? <Loader />\n        : (\n          <div className=\"modal-card\">\n            <header className=\"modal-card-head\">\n              <div\n                className=\"modal-card-title has-text-weight-medium\"\n                data-cy=\"modal-header\"\n              >\n                {`Todo #${selectedTodo.id}`}\n              </div>\n\n              {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n              <button\n                type=\"button\"\n                className=\"delete\"\n                data-cy=\"modal-close\"\n                onClick={() => handleClick()}\n              />\n            </header>\n\n            <div className=\"modal-card-body\">\n              <p className=\"block\" data-cy=\"modal-title\">\n                {selectedTodo.title}\n              </p>\n\n              <p className=\"block\" data-cy=\"modal-user\">\n                {selectedTodo.completed\n                  ? (<strong className=\"has-text-success\">Done</strong>)\n                  : (<strong className=\"has-text-danger\">Planned</strong>)}\n                {' by '}\n                <a href={`mailto:${user.email}`}>{user.name}</a>\n              </p>\n            </div>\n          </div>\n        )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport { FC, useEffect } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport { useDispatch } from 'react-redux';\nimport { useAppSelector } from './app/hooks';\nimport { getTodos } from './api';\nimport { setTodosAction } from './features/todos';\n\nimport { Loader } from './components/Loader';\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\n\nexport const App: FC = () => {\n  const todos = useAppSelector(state => state.todos);\n  const selectedTodo = useAppSelector(state => state.currentTodo);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    getTodos()\n      .then(data => dispatch(setTodosAction(data)));\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {todos.length > 0\n                ? <TodoList />\n                : <Loader />}\n            </div>\n          </div>\n        </div>\n      </div>\n      {selectedTodo && <TodoModal />}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}